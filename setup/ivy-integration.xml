<?xml version="1.0" encoding="UTF-8" ?>
<!--
    * Copyright 2010: Thomson Reuters Global Resources. All Rights Reserved. * Proprietary and
    Confidential information of TRGR. Disclosure, Use or Reproduction without the written *
    authorization of TRGR is prohibited
  -->
<project name="ivy-build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:contrib="antlib:net.sf.antcontrib">
    <!-- proxy server... -->
    <target name="-ivy-proxy">
        <property name="proxy.host" value="webproxy.int.westgroup.com" />
        <property name="proxy.port" value="80" />
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" />
    </target>

    <!-- ============================================================= -->
    <!-- Ivy initialization target -->
    <target name="-initialize-ivy"
            depends="-ivy-proxy"
            description="Load the Ivy Ant tasks and initialize Ivy settings.">
        <!-- Where to find the Ivy JAR and its peers: JARs that MAY need to be loaded in the same classloader... -->
        <property name="ivy.lib.dir" value="${basedir}/tools/ivy/lib/" />
        <property name="jsch.lib.dir" location="${basedir}/tools/jsch/lib/" />
        <property name="jdg.lib.dir" value="${basedir}/tools/jdg/lib" />
        <available property="jsch.lib.dir.exists" file="${jsch.lib.dir}" />
        <available property="jdg.lib.dir.exists" file="${jdg.lib.dir}" />
        <contrib:if>
            <and>
                <isset property="jsch.lib.dir.exists" />
                <isset property="jdg.lib.dir.exists" />
            </and>
            <contrib:then>
                <path id="ivy-and-peers.lib.path">
                    <fileset dir="${ivy.lib.dir}" />
                    <fileset dir="${jdg.lib.dir}" />
                    <fileset dir="${jsch.lib.dir}" />
                </path>
            </contrib:then>
            <contrib:else>
                <path id="ivy-and-peers.lib.path">
                    <fileset dir="${ivy.lib.dir}" />
                </path>
            </contrib:else>
        </contrib:if>

        <echo level="info" 
            message="Classpath for the Ivy jar and other Ant task jars that need to use the same classloader: ${toString:ivy-and-peers.lib.path}" />
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant"
                 classpathref="ivy-and-peers.lib.path"
                 loaderref="ivy-and-peers.classloader" />
        <property name="ivy.settings.environment" value="local" />
        <property name="latest.build" value="0.0.0.+" />
        <echo message="Using Ivy settings environment: '${ivy.settings.environment}'. The root Ivy settings file tools/ivy/settings/ivysettings.xml will include tools/ivy/settings/${ivy.settings.environment}-ivysettings.xml." />
        <ivy:settings file="tools/ivy/settings/ivysettings.xml" />
        <property name="ivy.xml.file" location="ivy.xml" />
    </target>

    <!-- ============================================================= -->
    <!-- build targets... -->
    <target name="ivy-all"
            depends="ivy-cleancache, ivy-report"
            description="Clear the Ivy cache, resolve all confs, then produce an Ivy report." />

    <target name="ivy-cleancache" depends="initialize" description="cleans the ivy cache">
        <ivy:cleancache />
    </target>

    <target name="ivy-deliver"
            depends="-ivy-resolve-all"
            description="Invoke ivy:deliver to create a publication-ready ivy.xml file in the dist directory.">
        <property name="ivy.deliver.status" value="integration" />
        <property name="ivy.deliver.replacedynamicrev" value="true" />
        <ivy:deliver pubrevision="${target-version}"
                     deliverpattern="${dist.dir}/ivy.xml"
                     conf="*(public)"
                     status="${ivy.deliver.status}" />
    </target>

    <target name="ivy-publish" depends="dist">
        <property name="ivy.publish.location" value="local" />
        <property name="ivy.publish.stage" value="integration" />
        <property name="ivy.publish.resolver"
                  value="${ivy.publish.location}-${ivy.publish.stage}" />
        <ivy:publish resolver="${ivy.publish.resolver}"
                     artifactspattern="${dist.dir}/[artifact].[ext]"
                     srcivypattern="${dist.dir}/ivy.xml"
                     pubrevision="${target-version}"
                     status="${ivy.deliver.status}"
                     overwrite="true" />
    </target>

    <target name="ivy-report"
            depends="-ivy-resolve-all"
            description="Generate an Ivy dependency report.">
        <!-- build dir Ivy will output a report... -->
        <property name="ivy.report.dir" location="${build.dir}/reports/ivy-report" />
        <ivy:cachepath pathid="project-ivy.all.classpath" conf="*" type="*" />
        <ivy:report todir="${ivy.report.dir}" />
    </target>

    <target name="-ivy-resolve-all" depends="initialize">
        <echo message="Resolving against ivy.xml file '${ivy.xml.file}', as specified by the 'ivy.xml.file' property." />
        <ivy:resolve file="${ivy.xml.file}"
                     settingsRef="ivy.instance"
                     conf="*"
                     resolveId="project.all" />
    </target>

</project>