<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright 2010: Thomson Reuters Global Resources. All Rights Reserved.
Proprietary and Confidential information of TRGR.  Disclosure, Use or Reproduction without the written authorization of TRGR is prohibited
-->
<!--  
 	Use this script to define your custom extract, transform, load logic.
    This contains example macro definitions that you may want to use as a
    starting point. It works in tandem with the database-custom-etl.xml
    target definitions.
 -->
<project name="database etl macro definitions" basedir="." xmlns:contrib="antlib:net.sf.antcontrib">

	<macrodef name="run-dbunit-export-macro">
		<attribute name="url" default="${machv.url}"/>
		<attribute name="output"/>
		<attribute name="sql"/>
		<attribute name="userid" default="${machv.user}"/>
		<attribute name="password" default="${machv.password}"/>
		<attribute name="format" default="flat"/>
		<attribute name="queryname" default="FOO"/>
		<sequential>
			<dbunit
				driver="oracle.jdbc.OracleDriver"
				url="@{url}"
				userid="@{userid}"
				password="@{password}">
				<export	dest="@{output}" format="@{format}">
					<query name="@{queryname}" sql="@{sql}"/>
				</export>

			</dbunit>
		</sequential>
	</macrodef>

	<macrodef name="run-dbunit-load-macro">
		<attribute name="filename"/>
		<attribute name="userid"/>
		<attribute name="password"/>
		<attribute name="operation" default="INSERT"/>
		<attribute name="format" default="csv"/>
		<sequential>
			<dbunit				
				driver="oracle.jdbc.OracleDriver"
				url="${url}"
				userid="@{userid}"
				password="@{password}">
				<dbconfig>
					<property name="datatypeFactory" value="org.dbunit.ext.oracle.Oracle10DataTypeFactory"/>
					<feature name="batchedStatements" value="true"/>
				</dbconfig>
				<operation 
					type="@{operation}" 
					src="@{filename}"
					format="@{format}"					
				/>
			</dbunit>
		</sequential>
	</macrodef>

	<macrodef name="truncate-tables-macro"
		description="Execute truncate command on all tables in a schema">
		<attribute name="user"/>
		<sequential>
			<mkdir dir="${tmp.dir}/@{user}"/>
			<echo level="info" file="${tmp.dir}/@{user}/build truncate script.sql">select 'DELETE FROM '||TABLE_NAME||';' from USER_SYNONYMS where table_name not like '%SEQ';</echo>
			<run-sql-macro 
				url="${url}" 
				userid="@{user}_user" 
				password="@{user}_user" 
				sqlfile="${tmp.dir}/@{user}/build truncate script.sql" 
				output="${tmp.dir}/@{user}/truncate tables.sql"/>
			<run-sql-macro 
				url="${url}" 
				userid="@{user}_user" 
				password="@{user}_user" 
				sqlfile="${tmp.dir}/@{user}/truncate tables.sql" 
				output="${tmp.dir}/@{user}/truncate tables results.sql"/>
		</sequential>
	</macrodef>

	<macrodef name="extract-macro">
		<attribute name="partition"/>
		<attribute name="url"/>
		<attribute name="password"/>
		<attribute name="user"/>
		<attribute name="output" default="${tmp.dir}/extract"/>
		<sequential>
			<available file="${extract.path}/schema-specific/@{partition}/input/input.txt" property="@{partition}.input.present"/>
			<contrib:if>
				<equals arg1="${@{partition}.input.present}" arg2="true"/>
				<contrib:then>
					<mkdir dir="@{output}/@{partition}/SQL"/>
					<mkdir dir="@{output}/@{partition}/OUTPUT"/>
					<pathconvert property="@{partition}.filelist" targetos="windows">
						<path>
							<fileset dir="${extract.path}/default/sql">
								<include name="**/*.sql"/>
							</fileset>
						</path>
						<chainedmapper>
							<flattenmapper/>
							<globmapper from="*.sql" to=""/>
						</chainedmapper>
					</pathconvert>
					<contrib:trycatch>
						<contrib:try>
							<loadfile property="@{partition}.input" srcFile="${extract.path}/schema-specific/@{partition}/input/${environment}/input.txt"/>
						</contrib:try>
						<contrib:catch>
							<loadfile property="@{partition}.input" srcFile="${extract.path}/schema-specific/@{partition}/input/input.txt"/>
						</contrib:catch>
						<contrib:finally>
						</contrib:finally>
					</contrib:trycatch>
					<for param="file" list="${@{partition}.filelist}" delimiter=';'>
						<sequential>
							<echo level="info">Running data extract for @{partition}.@{file}</echo>
							<contrib:trycatch>
								<contrib:try>
									<copy
										file="${extract.path}/schema-specific/@{partition}/sql/@{file}.sql"
										todir="@{output}/@{partition}/SQL"
										overwrite="true">
										<filterchain>
											<replacetokens>
												<token key="INPUT" value="${@{partition}.input}"/>
											</replacetokens>
										</filterchain>
									</copy>
								</contrib:try>
								<contrib:catch>
									<copy
										file="${extract.path}/default/sql/@{file}.sql"
										todir="@{output}/@{partition}/SQL"
										overwrite="true">
										<filterchain>
											<replacetokens>
												<token key="INPUT" value="${@{partition}.input}"/>
											</replacetokens>
										</filterchain>
									</copy>
								</contrib:catch>
								<contrib:finally>
									<loadfile property="@{partition}.@{file}.sql" srcFile="@{output}/@{partition}/sql/@{file}.sql"/>
									<run-dbunit-export-macro
										output="@{output}/@{partition}/OUTPUT/@{file}.xml"
										sql="${@{partition}.@{file}.sql}"
										queryname="@{file}"
										format="flat"
										userid="@{user}"
										password="@{password}"
										url="@{url}"
									/>
								</contrib:finally>
							</contrib:trycatch>
						</sequential>
					</for>
				</contrib:then>
			</contrib:if>
		</sequential>
	</macrodef>

	<macrodef name="load-extracted-data-macro">
		<attribute name="partition"/>
		<attribute name="user"/>
		<attribute name="input" default="${tmp.dir}/extract"/>
		<sequential>
			<mkdir dir="${tmp.dir}/extract/@{partition}/OUTPUT"/>
			<mkdir dir="${tmp.dir}/extract/@{partition}/SQL"/>
			<pathconvert property="@{partition}.load.filelist" targetos="windows">
				<path>
					<fileset dir="@{input}/@{partition}/OUTPUT">
						<include name="**/*.xml"/>
						<exclude name="LONG_TITLE_CLOB/*"/>
					</fileset>
				</path>
			</pathconvert>
			<for param="file" list="${@{partition}.load.filelist}" delimiter=';'>
				<sequential>
					<echo level="info">Loading data from @{file} to @{partition}</echo>
					<run-dbunit-load-macro
						filename="@{file}"
						userid="@{user}" 
						password="@{user}"
						format="flat"
					/>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="load-xml-data-macro">
		<attribute name="partition"/>
		<attribute name="user"/>
		<sequential>
			<pathconvert property="@{partition}.load.xml.filelist" targetos="windows">
				<path>
					<fileset dir="${load.path}/@{partition}">
						<include name="**/*.xml"/>
					</fileset>
				</path>
			</pathconvert>
			<for param="file" list="${@{partition}.load.xml.filelist}" delimiter=';'>
				<sequential>
					<echo  level="info">Loading data from @{file} to @{partition}</echo>
					<run-dbunit-load-macro
						filename="@{file}"
						userid="@{user}" 
						password="@{user}"
						format="flat"
					/>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="load-xls-data-macro">
		<attribute name="partition"/>
		<attribute name="user"/>
		<sequential>
			<contrib:trycatch>
				<contrib:try>
					<pathconvert property="default.xls.filelist" targetos="windows">
						<path>
							<fileset dir="${load.path}/default">
								<include name="**/*.xls"/>
							</fileset>
						</path>
					</pathconvert>
					<for param="file" list="${default.xls.filelist}" delimiter=';'>
						<sequential>
							<run-dbunit-load-macro 
								filename="@{file}" 
								userid="@{user}" 
								password="@{user}" 
								format="xls"/>
						</sequential>
					</for>
				</contrib:try>
				<contrib:catch>
					<pathconvert property="@{partition}.xls.filelist" targetos="windows">
						<path>
							<fileset dir="${load.path}/@{partition}">
								<include name="**/*.xls"/>
							</fileset>
						</path>
					</pathconvert>
					<for param="file" list="${@{partition}.xls.filelist}" delimiter=';'>
						<sequential>
							<echo level="info">Loading data from @{file} to @{partition}</echo>
							<run-dbunit-load-macro 
								filename="@{file}" 
								userid="@{user}" 
								password="@{user}" 
								format="xls"/>
						</sequential>
					</for>
				</contrib:catch>
				<contrib:finally>
				</contrib:finally>
			</contrib:trycatch>
		</sequential>
	</macrodef>

	<macrodef name="load-csv-data-macro">
		<attribute name="partition"/>
		<attribute name="user"/>
		<sequential>
			<run-dbunit-load-macro 
				filename="${load.path}/default/csv" 
				userid="@{user}" 
				password="@{user}" 
				format="csv"/>
		</sequential>
	</macrodef>

	<macrodef name="extract-data-macro">
		<attribute name="partition"/>
		<sequential>
			<mkdir dir="${tmp.dir}/extract/@{partition}/SQL"/>
			<mkdir dir="${tmp.dir}/extract/@{partition}/OUTPUT"/>
			<contrib:if>
				<equals arg1="@{partition}" arg2="docket_md"/>
				<contrib:then>
					<extract-macro partition="@{partition}"
						user="${jrecs.user}"
						password="${jrecs.password}"
						url="${jrecs.url}"/>
				</contrib:then>
				<contrib:else>
					<extract-macro partition="@{partition}"
						user="${machv.user}"
						password="${machv.password}"
						url="${machv.url}"/>
				</contrib:else>
			</contrib:if>
		</sequential>
	</macrodef>

	<macrodef name="load-lookup-data-macro">
		<attribute name="partition"/>
		<sequential>
			<echo level="info">Loading lookup data to: @{partition}${partition.suffix}</echo>
			<disable-constraints-macro user="@{partition}${partition.suffix}"/>
			<load-xls-data-macro 
				partition="@{partition}" 
				user="@{partition}${partition.suffix}_user"/>
			<enable-constraints-macro user="@{partition}${partition.suffix}_user"/>
		</sequential>
	</macrodef>

	<macrodef name="load-data-macro">
		<attribute name="partition"/>
		<sequential>
			<echo level="info">Loading data to: @{partition}${partition.suffix}</echo>
			<disable-constraints-macro user="@{partition}${partition.suffix}"/>
			<load-xls-data-macro 
				partition="@{partition}" 
				user="@{partition}${partition.suffix}_user"/>
			<load-extracted-data-macro 
				partition="@{partition}" 
				user="@{partition}${partition.suffix}_user"/>
			<load-xml-data-macro 
				partition="@{partition}" 
				user="@{partition}${partition.suffix}_user"/>
			<enable-constraints-macro user="@{partition}${partition.suffix}_user"/>
		</sequential>
	</macrodef>

	<macrodef name="disable-constraints-and-truncate-tables-macro">
		<attribute name="partition"/>
		<sequential>
			<echo level="info">Truncating Tables in:  @{partition}${partition.suffix}</echo>
			<disable-constraints-macro user="@{partition}${partition.suffix}"/>
			<truncate-tables-macro user="@{partition}${partition.suffix}"/>
		</sequential>
	</macrodef>

</project>
